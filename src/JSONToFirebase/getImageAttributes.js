//@ts-check

import { storage } from "../../firebase.js";
import { encode } from 'blurhash';

/** 
 * This function is called onClick by the 'Get Image Data' button. 
 * A valid bucket filepath will console.log a valid downloadURL and blurhash.
 * Thus the image must already exist within our Firebase Cloud Storage bucket for this to work.
 * @param {string} imageFilePath the inputValue from the input form passed in as a param
 * @returns {Promise<string[]>} an array holding our two image attributes
*/
async function getImageAttributes(imageFilePath) {
   const downloadURL = await fetchDownloadURL(imageFilePath);
   console.log(`%cdownloadURL: ${downloadURL}`, "color: #439EC1; font-weight: bold;");
   const blurhash = await generateBlurHash(downloadURL);
   console.log(`%cblurhash: ${blurhash}`, "color: #439EC1; font-weight: bold;");

   return [downloadURL, blurhash];
}


/** Fetches the download URL from our storage bucket.
 * @param {string} imageFilePath 
 * @returns {Promise<string>} downloadURL a URL to the actual image
 */
async function fetchDownloadURL(imageFilePath) {
   const imageRef = storage.child(imageFilePath);

   let downloadURL = "";
   try {
      console.log(`fetching URL for: ${imageFilePath}`);
      downloadURL = await imageRef.getDownloadURL(); //see here: https://firebase.google.com/docs/storage/web/download-files#web_5
   } catch(error) {
      console.error(`Error fetching download URL for ${imageFilePath}: ${error}`);
   }

   return downloadURL;
}


/** Functions to generate BlurHash for an image. Taken from https://github.com/woltapp/blurhash/tree/master/TypeScript
 * @param {string} imageUrl the download URL generated by fetchDownloadURL
 * @returns {Promise<string>} an encoded string representing the blurhashed image.
 */
async function generateBlurHash(imageUrl) {
   console.log(`generating blurhash . . .`);
   const image = await loadImage(imageUrl);
   const imageData = getImageData(image);
   return encode(imageData.data, imageData.width, imageData.height, 4, 4);
}

/** 
 * @param {string} src the download URL
 * @returns an Image object
 */
async function loadImage(src) {
   return new Promise((resolve, reject) => {
      const img = new Image();
      img.crossOrigin = "Anonymous"; //<-- this sets CORS policy on client-side I believe. See here: https://stackoverflow.com/questions/22097747/how-to-fix-getimagedata-error-the-canvas-has-been-tainted-by-cross-origin-data
      img.onload = () => resolve(img);
      img.onerror = (...args) => reject(args);
      img.src = src;
   });
}

/** Draws the image on the canvas and gets the image data.
 * @param {HTMLImageElement} image the image object returned from loadImage
 * @returns {ImageData} image data to be encoded by the blurhash library.
 */
function getImageData(image) {
  const canvas = document.createElement("canvas");
  canvas.width = image.width;
  canvas.height = image.height;
  const context = canvas.getContext("2d");

  if (!context) { throw new Error("Failed to get 2D context"); }

  context.drawImage(image, 0, 0); //see here for drawImage: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/drawImage
  return context.getImageData(0, 0, image.width, image.height); //see here for getImageData: https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/getImageData
};

export default getImageAttributes;